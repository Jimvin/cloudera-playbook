---
- include_vars: "{{ inventory_dir }}/group_vars/pki.yml"
- include_vars: "{{ inventory_dir }}/group_vars/ca.yml"
- include_vars: "{{ inventory_dir }}/group_vars/tls_enc.yml"

#- name: Install {{ openssl_path }}
#  yum:
#    name: {{ openssl_path }}
#    state: latest

- name: Prepare security directories
  file:
    state: directory
    path: "{{ security_root }}"
    mode: 0755
    owner: root

- name: Prepare security subdirs
  file:
    state: directory
    path: "{{ security_root }}/{{ item }}"
    mode: 0755
    owner: root
  with_items:
    - "x509"
    - "jks"
    - "CAcerts"

- name: Create JKS file
  shell: "{{ keytool_path }} -genkeypair -alias {{ inventory_hostname_short }} -keyalg RSA -keystore {{ security_root }}/jks/{{ inventory_hostname_short }}.jks -keysize 2048 -dname \"CN={{ inventory_hostname }},OU={{ ca_ou }},O={{ ca_org_name }},ST={{ ca_state_or_province }},C={{ ca_countryname_default }}\" -ext san=dns:{{ inventory_hostname }} -storepass {{ keystore_password }} -keypass {{ keystore_password }} -storetype jks"
  args: 
    creates: "{{ security_root }}/jks/{{ inventory_hostname_short }}.jks"

- name: Change permisions on JKS file
  file:
    state: file
    path: "{{ security_root }}/jks/{{ inventory_hostname_short }}.jks"
    mode: 0644
    owner: root

- name: Check JKS contains a private key
  shell: "{{ keytool_path }} -list -keystore {{ security_root }}/jks/{{ inventory_hostname_short }}.jks -alias {{ inventory_hostname_short }} -storepass {{ keystore_password }} | grep PrivateKeyEntry"

- name: Create CSR
  shell: "{{ keytool_path }} -certreq -alias {{ inventory_hostname_short }} -keystore {{ security_root }}/jks/{{ inventory_hostname_short }}.jks -file {{ security_root }}/x509/{{ inventory_hostname_short }}.csr -ext san=dns:{{ inventory_hostname }} -ext EKU=serverAuth,clientAuth -storepass {{ keystore_password }} -keypass {{ keystore_password }}"
  args: 
    creates: "{{ security_root }}/x509/{{ inventory_hostname_short }}.csr"

- name: Prepare directory for csrs
  local_action:
    module: file
    state: directory
    mode: 0777
    owner: "{{ ansible_user_id }}"
    path: "{{ csr_certificates_local_location }}"

- name: Fetch certificate signing requests
  fetch:
    src: "{{ security_root }}/x509/{{ inventory_hostname_short }}.csr"
    dest: "{{ csr_certificates_local_location }}/"
    flat: yes
  ignore_errors: yes

- name: Push ca files
  copy:
    src: "{{ item }}"
    dest: "{{ security_root }}/CAcerts"
    mode: 0744
  with_items:
    - "{{ signed_certificates_local_location }}/{{ chain_cert_name }}"
    - "{{ signed_certificates_local_location }}/{{ intermediate_ca_cert_name }}"
    - "{{ signed_certificates_local_location }}/{{ root_ca_cert_name }}"

- set_fact:
    root_ca_present: False

- name: Check Root CA is present
  shell: "{{ keytool_path }} -list -keystore {{ security_root }}/jks/{{ inventory_hostname_short }}.jks -storepass {{ keystore_password }} -storetype jks -alias {{ root_ca_alias }}"
  register: root_ca_check
  ignore_errors: yes

- set_fact:
    root_ca_present: True
  when: root_ca_check.rc == 0

- name: Check Root CA is correct
  shell: "[[ $({{ openssl_path }} x509 -noout -modulus -in {{ security_root }}/CAcerts/{{ root_ca_cert_name }} | {{ openssl_path }} md5) == $({{ keytool_path }} -list -keystore {{ security_root }}/jks/{{ inventory_hostname_short }}.jks -storepass {{ keystore_password }} -storetype jks -alias {{ root_ca_alias }} -rfc | {{ openssl_path }} x509 -inform pem -modulus -noout | {{ openssl_path }} md5) ]]"
  when: root_ca_present == True
  ignore_errors: yes
  register: root_ca_correctness

- name: Remove incorrect Root CA
  shell: "{{ keytool_path }} -delete -alias {{ root_ca_alias }} -keystore {{ security_root }}/jks/{{ inventory_hostname_short }}.jks -storepass {{ keystore_password }}"
  when: root_ca_present == True and root_ca_correctness.rc != 0

- set_fact:
    root_ca_present: False
  when: root_ca_present == True and root_ca_correctness.rc != 0

- name: Install Root CA cert into JKS
  shell: "{{ keytool_path }} -importcert -alias {{ root_ca_alias }} -keystore {{ security_root }}/jks/{{ inventory_hostname_short }}.jks -file {{ item }} -storepass {{ keystore_password }} -noprompt -trustcacerts"
  with_items: 
    - "{{ security_root }}/CAcerts/{{ root_ca_cert_name }}"
  when: root_ca_present == False

- set_fact:
    int_ca_present: False

- name: Check Intermediate CA is present
  shell: "{{ keytool_path }} -list -keystore {{ security_root }}/jks/{{ inventory_hostname_short }}.jks -storepass {{ keystore_password }} -storetype jks -alias {{ intermediate_ca_alias }}"
  register: int_ca_check
  ignore_errors: yes

- set_fact:
    int_ca_present: True
  when: int_ca_check.rc == 0

- name: Check Intermediate CA is correct
  shell: "[[ $({{ openssl_path }} x509 -noout -modulus -in {{ security_root }}/CAcerts/{{ intermediate_ca_cert_name }} | {{ openssl_path }} md5) == $({{ keytool_path }} -list -keystore {{ security_root }}/jks/{{ inventory_hostname_short }}.jks -storepass {{ keystore_password }} -storetype jks -alias {{ intermediate_ca_alias }} -rfc | {{ openssl_path }} x509 -inform pem -modulus -noout | {{ openssl_path }} md5) ]]"
  when: int_ca_present == True
  ignore_errors: yes
  register: int_ca_correctness

- name: Remove incorrect Intermediateoot CA
  shell: "{{ keytool_path }} -delete -alias {{ intermediate_ca_alias }} -keystore {{ security_root }}/jks/{{ inventory_hostname_short }}.jks -storepass {{ keystore_password }}"
  when: int_ca_present == True and int_ca_correctness.rc != 0

- set_fact:
    int_ca_present: False
  when: int_ca_present == True and int_ca_correctness.rc != 0

- name: Install Intermediate CA cert into JKS
  shell: "{{ keytool_path }} -importcert -alias {{ intermediate_ca_alias }} -keystore {{ security_root }}/jks/{{ inventory_hostname_short }}.jks -file {{ item }} -storepass {{ keystore_password }} -noprompt -trustcacerts"
  with_items: 
    - "{{ security_root }}/CAcerts/{{ intermediate_ca_cert_name }}"
  when: int_ca_present == False

- name: Check if the exported key exists
  file:
    path: "{{ security_root }}/x509/{{ inventory_hostname_short }}.key"
    state: file
    mode: 0644
  register: keystatus
  ignore_errors: yes

- name: Export PKCS12
  shell: "{{ keytool_path }} -importkeystore -srckeystore {{ security_root }}/jks/{{ inventory_hostname_short }}.jks -destkeystore {{ security_root }}/x509/{{ inventory_hostname_short }}.p12 -deststoretype PKCS12 -srcstorepass {{ keystore_password }} -srckeypass {{ keystore_password }} -deststorepass {{ keystore_password }} -destkeypass {{ keystore_password }} -srcalias {{ inventory_hostname_short }} -destalias {{ inventory_hostname_short }}"
  when: keystatus is failed

- name: Export Key
  shell: "{{ openssl_path }} pkcs12 -in {{ security_root }}/x509/{{ inventory_hostname_short }}.p12 -nocerts -out {{ security_root }}/x509/{{ inventory_hostname_short }}.key -passout pass:{{ keystore_password }} -passin pass:{{ keystore_password }}"
  when: keystatus is failed

- name: Change permisions on Key
  file:
    state: file
    path: "{{ security_root }}/x509/{{ inventory_hostname_short }}.key"
    mode: 0644
    owner: root

- name: Delete PKCS12
  file:
    state: absent
    path: "{{ security_root }}/x509/{{ inventory_hostname_short }}.p12"

- name: Write key password
  shell: "echo {{ keystore_password }} > {{ security_root }}/x509/key.pw"
  args:
    creates: "{{ security_root }}/x509/key.pw"

- name: Change password permissions
  file:
    state: file
    path: "{{ security_root }}/x509/key.pw"
    mode: 0644
    owner: root
    group: root

- name: Check cacerts_file exists
  local_action:
    module: file
    path: "{{ cacerts_file }}"
    state: file

- set_fact:
    jssecacerts_local_location: "{{ signed_certificates_local_location }}/jssecacerts"

- name: Prepare directory for signed certs
  local_action:
    module: file
    state: directory
    mode: 0777
    owner: "{{ ansible_user_id }}"
    path: "{{ signed_certificates_local_location }}"

- name: Copy cacerts to jssecacerts
  local_action: "shell cp {{ cacerts_file }} {{ jssecacerts_local_location }}"
  run_once: true
  args:
    creates: "{{ jssecacerts_local_location }}"

- name: Check cacerts_file exists
  local_action:
    module: file
    path: "{{ jssecacerts_local_location }}"
    mode: 0744
    state: file
  run_once: true

- name: Change jssecacerts away from default
  local_action: shell {{ keytool_path }} -storepasswd -storepass changeit -keystore {{ jssecacerts_local_location }} -new {{ jssecacerts_pw }}
  run_once: true
  ignore_errors: yes

- set_fact:
    root_ca_present: False
  run_once: true

- name: Check Root CA is present in jssecacerts
  local_action: shell {{ keytool_path }} -list -keystore {{ jssecacerts_local_location }} -storepass {{ jssecacerts_pw }} -storetype jks -alias {{ root_ca_alias }}
  register: root_ca_check
  run_once: true
  ignore_errors: yes

- set_fact:
    root_ca_present: True
  when: root_ca_check.rc == 0
  run_once: true

- name: Check Root CA is correct in jssecacerts
  local_action: shell [[ $({{ openssl_path }} x509 -noout -modulus -in {{ security_root }}/CAcerts/{{ root_ca_cert_name }} | {{ openssl_path }} md5) == $({{ keytool_path }} -list -keystore {{ jssecacerts_local_location }} -storepass {{ jssecacerts_pw }} -storetype jks -alias {{ root_ca_alias }} -rfc | {{ openssl_path }} x509 -inform pem -modulus -noout | {{ openssl_path }} md5) ]]
  when: root_ca_present == True
  ignore_errors: yes
  register: root_ca_correctness
  run_once: true

- name: Remove incorrect Root CA from jssecacerts
  local_action: shell {{ keytool_path }} -delete -alias {{ root_ca_alias }} -keystore {{ jssecacerts_local_location }} -storepass {{ jssecacerts_pw }}
  when: root_ca_present == True and root_ca_correctness.rc != 0
  run_once: true

- set_fact:
    root_ca_present: False
  when: root_ca_present == True and root_ca_correctness.rc != 0
  run_once: true

- name: Install Root CA cert into jssecacerts
  local_action: shell {{ keytool_path }} -importcert -alias {{ root_ca_alias }} -keystore {{ jssecacerts_local_location }} -file {{ item }} -storepass {{ jssecacerts_pw }} -noprompt -trustcacerts
  with_items: 
    - "{{ security_root }}/CAcerts/{{ root_ca_cert_name }}"
  when: root_ca_present == False
  run_once: true

- set_fact:
    int_ca_present: False
  run_once: true

- name: Check Intermediate CA is present in jssecacerts
  local_action: shell {{ keytool_path }} -list -keystore {{ jssecacerts_local_location }} -storepass {{ jssecacerts_pw }} -storetype jks -alias {{ intermediate_ca_alias }}
  register: int_ca_check
  ignore_errors: yes
  run_once: true

- set_fact:
    int_ca_present: True
  when: int_ca_check.rc == 0
  run_once: true

- name: Check Intermediate CA is correct in jssecacerts
  local_action: shell [[ $({{ openssl_path }} x509 -noout -modulus -in {{ security_root }}/CAcerts/{{ intermediate_ca_cert_name }} | {{ openssl_path }} md5) == $({{ keytool_path }} -list -keystore {{ jssecacerts_local_location }} -storepass {{ jssecacerts_pw }} -storetype jks -alias {{ intermediate_ca_alias }} -rfc | {{ openssl_path }} x509 -inform pem -modulus -noout | {{ openssl_path }} md5) ]]
  when: int_ca_present == True
  ignore_errors: yes
  register: int_ca_correctness
  run_once: true

- name: Remove incorrect Intermediateoot CA from jssecacerts
  local_action: shell {{ keytool_path }} -delete -alias {{ intermediate_ca_alias }} -keystore {{ jssecacerts_local_location }} -storepass {{ jssecacerts_pw }}
  when: int_ca_present == True and int_ca_correctness.rc != 0
  run_once: true

- set_fact:
    int_ca_present: False
  when: int_ca_present == True and int_ca_correctness.rc != 0
  run_once: true

- name: Install Intermediate CA cert into jssecacerts
  local_action: shell {{ keytool_path }} -importcert -alias {{ intermediate_ca_alias }} -keystore {{ jssecacerts_local_location }} -file {{ item }} -storepass {{ jssecacerts_pw }} -noprompt -trustcacerts
  with_items: 
    - "{{ security_root }}/CAcerts/{{ intermediate_ca_cert_name }}"
  when: int_ca_present == False
  run_once: true

- name: Distribute jssecacerts file
  copy:
    src: "{{ jssecacerts_local_location }}"
    dest: "{{ jssecacerts_file }}"
    mode: 0644

- name: Update CA Certs for Ansible
  blockinfile:
    path: /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
    block: "{{ lookup('file', '{{ tls.cert_chain }}') }}"
